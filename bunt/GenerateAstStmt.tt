<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<# string[] sep = new string[] { ", " }; #>
<# 
var dic = new Dictionary<string, string>() {
	{ "Block",      "List<Stmt> statements" },
	{ "Class",      "Token name, Expr.Variable superclass, List<Stmt.Function> methods" },
	{ "Expression", "Expr expression"},
	{ "Function",   "Token name, List<Token> parameters, List<Stmt> body" }, // params is a C# reserved keyword
	{ "If",         "Expr condition, Stmt thenBranch, Stmt elseBranch" },
	{ "Var",        "Token name, Expr initializer" },
	{ "Return",     "Token keyword, Expr value" },
	{ "Print",      "Expr expression" },
	{ "While",      "Expr condition, Stmt body" }
};
#>
// this file is autogenerated using T4
// https://learn.microsoft.com/en-us/visualstudio/modeling/design-time-code-generation-by-using-t4-text-templates?source=recommendations&view=vs-2022&tabs=csharp
// https://stackoverflow.com/questions/42353536/how-to-generate-a-simple-class-with-t4

namespace bunt
{
	public abstract class Stmt
	{
		public interface IVisitor<T> {
<# foreach (string key in dic.Keys) { #>
		T visit<#= key #>Stmt(<#= key #> stmt);
<# } #>
		}

<# foreach (string key in dic.Keys) { #>
		public class <#= key #> : Stmt
		{
<# foreach (string value in dic[key].Split(sep, StringSplitOptions.RemoveEmptyEntries)) {#>
			public readonly <#= value #>;
<# } #>

			public <#= key #>(<#= dic[key] #>) {
<# foreach (string value in dic[key].Split(sep, StringSplitOptions.RemoveEmptyEntries)) {#>
				this.<#= value.Split(' ')[1] #> = <#= value.Split(' ')[1] #>;
<# } #>
			}
						
			public override T accept<T>(IVisitor<T> visitor) {
				return visitor.visit<#= key #>Stmt(this);
			}
		}
	
<# } #>

		public abstract T accept<T>(IVisitor<T> visitor);
	}
}